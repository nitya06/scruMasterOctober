package com.neev.userservice

import grails.transaction.Transactional
import com.neev.domain.User;
import java.security.MessageDigest
import org.springframework.mail.MailSendException
import org.slf4j.Logger
import org.slf4j.LoggerFactory

@Transactional
class SaveDataService 
{    
    final Logger logger = LoggerFactory.getLogger(SaveDataService.class)
    
    /*
     *Parameters : name, email and password
     *Functionality : Register user details into database and send token link to user's mail id to get confirm
     *Return : Result status of a function execution
     */
    def saveData(String name , String email , String password) 
    {    
        logger.info("Entered into saveData method of SaveDataService")
        def Status = false
        User user = new User() 
        user.name = name
        user.email =  email
        user.password = password
        user.status = "INACTIVE"
        def hash = md(email,name)
        user.verify_code_for_signIn= hash
        if(user.validate()) 
        {
            try 
            {
                sendMail
                {
                    to email
                    subject " Congratulations, your account is created"
                    body "Congratulations, your account is created on scruMaster \n Please click this link to verify -\n  http://10.132.160.215:8080/iceScrum/users/verify?token=${hash}"
                    
                    
                }
                user.save()
                logger.info("Returning vailidData from saveData method of SaveDataService")
                return "vailidData" 
            }
            catch(MailSendException e)
            {
                logger.info("Exception in saveData method of SaveDataService and returning msgSendingFail")
                return "msgSendingFail"
            }       
        }     
        else
        {    
            logger.info("Please provide Valid Information")
            return "dataNotValid"
        } 
    }

    /*
     *Parameters : new password and email
     *Functionality : update the password of user. In case if user forgets password
     *Return : Status (true or false) depending on success of password updation
     */
    boolean updatePassword(String newPassword,String email)
    {
        logger.info("Entered into updatePassword method of SaveDataService")
        def user = User.findByEmail(email)
        if(user)
        {    
            user.password = newPassword
            if(user.validate()) 
            {
                if(user.save())
                {
                    logger.info("Returning true from updatePassword method of SaveDataService")
                    return true
                }
                logger.info("Returning false from updatePassword method of SaveDataService")
                return false 
            }
            else
            {
                logger.info("Returning false from updatePassword method of SaveDataService")
                return false
            }
        }
    }
    
    /*
     *Parameters : email
     *Functionality : generate session token when user log in to the application
     *Return : session token
     */
    def getSessionToken(def email)
    {
        logger.info("Entered into getSessionToken method of SaveDataService")
        def date = new Date()
        def sessToken =  md(email,date)
        logger.info("Returning Session Token from getSessionToken method of SaveDataService ")
        return sessToken
    }
    
    /*
     *Parameters : email and session token
     *Functionality : save the session token into database on successful log in to application to keep track of user's action
     *Return : user name
     */
    def saveSessionToken(def email , def sessionToken)
    {
        logger.info("Entered into saveSessionToken method of SaveDataService")
        User user = new User()
        user = User.findByEmail(email)
        if(user)
        {
            user.session_token=sessionToken
            user.save()
        }
        logger.info("Returning user name from saveSessionToken method of SaveDataService")
        return user.name
    }
    
    
    /*
     *Parameters : session token
     *Functionality : to make session token null on log out
     *Return : Not Applicable
     */
    def nullSessionToken(def token)
    {  
        logger.info("Entered into nullSessionToken method of SaveDataService")
        def user = User.findBySession_token(token)
        if(user)
        {
            user.session_token = null
            user.save()
        }
    }
    
    /*
     *Parameters : email and name
     *Functionality : generate a hash code using md5
     *Return : hash code generated by md5
     */
    def md(def email,def name)
    {
        logger.info("Entered into md method of SaveDataService")
        def digest = MessageDigest.getInstance("MD5")
        def text = "${email} ${name}"
        def md5hash = new BigInteger(1,digest.digest(text.getBytes())).toString(16).padLeft(32,"0")
        logger.info("Returning md5hash from md method of SaveDataService")
        return md5hash
    }
    
    /*
     *Parameters : jsonObject which contains oldpassword and new password
     *Functionality : update the profile of the user (Password)
     *Return : status (true/false) depending on successful change of password
     */
    def updateProfile(def jsonObject)
    {
        logger.info("Entered into updateProfile method of SaveDataService")
        def oldpassword= jsonObject.oldpassword
        def newpassword= jsonObject.newpassword
        def user = User.findBySession_token(jsonObject.token)
        if(oldpassword.toString()==user.password.toString())
        {    
            user.password=newpassword
            if(user.validate()) 
            {
                user.save()
                logger.info("Returning true from updateProfile method of SaveDataService")
                return true
            }
            logger.info("Returning false from updateProfile method of SaveDataService")
            return false
        }
        else
        {
            return false
        }
    }       
    
    /*
     *Parameters : session token
     *Functionality : get email id of user logged in 
     *Return : user's email if user exist with the token passed otherwise null
     */
    def getEmailId(def sessionToken)
    {
        logger.info("Entered into getEmailId method of SaveDataService")
        def user = User.findBySession_token(sessionToken)
        if(user)
        {
            logger.info("Returning user's Email from getEmailId method of SaveDataService")
            return user.email
        }
        logger.info("Returning null from getEmailId method of SaveDataService")
        return null
    }
}